/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ActividadFelina
 */
export interface ActividadFelina {
    /**
     * 
     * @type {string}
     * @memberof ActividadFelina
     */
    'actividadFelinaId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ActividadFelina
     */
    'gatoId': string;
    /**
     * 
     * @type {string}
     * @memberof ActividadFelina
     */
    'fechaInicio': string;
    /**
     * 
     * @type {string}
     * @memberof ActividadFelina
     */
    'fechaFin': string;
    /**
     * 
     * @type {number}
     * @memberof ActividadFelina
     */
    'aproximaciones'?: number;
    /**
     * 
     * @type {number}
     * @memberof ActividadFelina
     */
    'alimentoConsumido'?: number;
    /**
     * 
     * @type {number}
     * @memberof ActividadFelina
     */
    'aproximacionesSinConsumo'?: number;
    /**
     * 
     * @type {Gato}
     * @memberof ActividadFelina
     */
    'gato'?: Gato;
}
/**
 * 
 * @export
 * @interface Aviso
 */
export interface Aviso {
    /**
     * 
     * @type {string}
     * @memberof Aviso
     */
    'avisoId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Aviso
     */
    'usuarioId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Aviso
     */
    'limpiarContenedor': string;
    /**
     * 
     * @type {string}
     * @memberof Aviso
     */
    'limpiarPlato': string;
    /**
     * 
     * @type {string}
     * @memberof Aviso
     */
    'caducidad': string;
    /**
     * 
     * @type {number}
     * @memberof Aviso
     */
    'alimentoDisponible'?: number;
    /**
     * 
     * @type {Usuario}
     * @memberof Aviso
     */
    'usuario'?: Usuario;
}
/**
 * 
 * @export
 * @interface Collar
 */
export interface Collar {
    /**
     * 
     * @type {string}
     * @memberof Collar
     */
    'collarId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Collar
     */
    'fechaSalida': string;
    /**
     * 
     * @type {string}
     * @memberof Collar
     */
    'fechaActivacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Collar
     */
    'numeroRegistro': string;
    /**
     * 
     * @type {boolean}
     * @memberof Collar
     */
    'estatusActivacion': boolean;
    /**
     * 
     * @type {Gato}
     * @memberof Collar
     */
    'gato'?: Gato;
}
/**
 * 
 * @export
 * @interface CollarEntidadDto
 */
export interface CollarEntidadDto {
    /**
     * 
     * @type {string}
     * @memberof CollarEntidadDto
     */
    'collarId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CollarEntidadDto
     */
    'fechaSalida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CollarEntidadDto
     */
    'fechaActivacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CollarEntidadDto
     */
    'numeroRegistro'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CollarEntidadDto
     */
    'estatusActivacion'?: boolean;
}
/**
 * 
 * @export
 * @interface CredencialesUsuario
 */
export interface CredencialesUsuario {
    /**
     * 
     * @type {string}
     * @memberof CredencialesUsuario
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof CredencialesUsuario
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface DiadelaSemana
 */
export interface DiadelaSemana {
    /**
     * 
     * @type {number}
     * @memberof DiadelaSemana
     */
    'diadelaSemanaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DiadelaSemana
     */
    'dia': string;
}
/**
 * 
 * @export
 * @interface DisponibilidadAvisoDto
 */
export interface DisponibilidadAvisoDto {
    /**
     * 
     * @type {number}
     * @memberof DisponibilidadAvisoDto
     */
    'alimentoDisponible'?: number;
}
/**
 * 
 * @export
 * @interface Dosificador
 */
export interface Dosificador {
    /**
     * 
     * @type {string}
     * @memberof Dosificador
     */
    'dosificadorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Dosificador
     */
    'fechaSalida': string;
    /**
     * 
     * @type {string}
     * @memberof Dosificador
     */
    'fechaActivacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Dosificador
     */
    'numeroRegistro': string;
    /**
     * 
     * @type {boolean}
     * @memberof Dosificador
     */
    'estatusActivacion': boolean;
    /**
     * 
     * @type {Usuario}
     * @memberof Dosificador
     */
    'usuario'?: Usuario;
}
/**
 * 
 * @export
 * @interface DosificadorEntidadDto
 */
export interface DosificadorEntidadDto {
    /**
     * 
     * @type {string}
     * @memberof DosificadorEntidadDto
     */
    'dosificadorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DosificadorEntidadDto
     */
    'fechaSalida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DosificadorEntidadDto
     */
    'fechaActivacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DosificadorEntidadDto
     */
    'numeroRegistro'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DosificadorEntidadDto
     */
    'estatusActivacion'?: boolean;
}
/**
 * 
 * @export
 * @interface Gato
 */
export interface Gato {
    /**
     * 
     * @type {string}
     * @memberof Gato
     */
    'gatoId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Gato
     */
    'usuarioId': string;
    /**
     * 
     * @type {string}
     * @memberof Gato
     */
    'collarId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Gato
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof Gato
     */
    'raza'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Gato
     */
    'sexo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Gato
     */
    'edad'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Gato
     */
    'imagenGato'?: string | null;
    /**
     * 
     * @type {Usuario}
     * @memberof Gato
     */
    'usuario'?: Usuario;
    /**
     * 
     * @type {Collar}
     * @memberof Gato
     */
    'collar'?: Collar;
}
/**
 * 
 * @export
 * @interface GatoEntidadDto
 */
export interface GatoEntidadDto {
    /**
     * 
     * @type {string}
     * @memberof GatoEntidadDto
     */
    'gatoId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GatoEntidadDto
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof GatoEntidadDto
     */
    'raza'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GatoEntidadDto
     */
    'sexo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GatoEntidadDto
     */
    'edad'?: number;
    /**
     * 
     * @type {string}
     * @memberof GatoEntidadDto
     */
    'imagenGato'?: string | null;
    /**
     * 
     * @type {CollarEntidadDto}
     * @memberof GatoEntidadDto
     */
    'collar'?: CollarEntidadDto;
}
/**
 * 
 * @export
 * @interface GetUsuario
 */
export interface GetUsuario {
    /**
     * 
     * @type {string}
     * @memberof GetUsuario
     */
    'apellidoMaterno'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetUsuario
     */
    'apellidoPaterno'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetUsuario
     */
    'dosificadorId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetUsuario
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetUsuario
     */
    'imagenUsuario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetUsuario
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetUsuario
     */
    'userName'?: string | null;
    /**
     * 
     * @type {DosificadorEntidadDto}
     * @memberof GetUsuario
     */
    'dosificador'?: DosificadorEntidadDto;
}
/**
 * 
 * @export
 * @interface Horario
 */
export interface Horario {
    /**
     * 
     * @type {string}
     * @memberof Horario
     */
    'horarioId'?: string;
    /**
     * 
     * @type {number}
     * @memberof Horario
     */
    'diaDeLaSemanaId': number;
    /**
     * 
     * @type {string}
     * @memberof Horario
     */
    'usuarioId': string;
    /**
     * 
     * @type {string}
     * @memberof Horario
     */
    'hora': string;
    /**
     * 
     * @type {Usuario}
     * @memberof Horario
     */
    'usuario'?: Usuario;
    /**
     * 
     * @type {DiadelaSemana}
     * @memberof Horario
     */
    'diadelaSemana'?: DiadelaSemana;
}
/**
 * 
 * @export
 * @interface HorarioEntidadDto
 */
export interface HorarioEntidadDto {
    /**
     * 
     * @type {string}
     * @memberof HorarioEntidadDto
     */
    'horarioId'?: string;
    /**
     * 
     * @type {number}
     * @memberof HorarioEntidadDto
     */
    'diaDeLaSemanaId': number;
    /**
     * 
     * @type {string}
     * @memberof HorarioEntidadDto
     */
    'hora': string;
}
/**
 * 
 * @export
 * @interface HorarioModificarDto
 */
export interface HorarioModificarDto {
    /**
     * 
     * @type {string}
     * @memberof HorarioModificarDto
     */
    'hora'?: string | null;
}
/**
 * 
 * @export
 * @interface ModificarAvisoDto
 */
export interface ModificarAvisoDto {
    /**
     * 
     * @type {string}
     * @memberof ModificarAvisoDto
     */
    'limpiarContenedor'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModificarAvisoDto
     */
    'limpiarPlato'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModificarAvisoDto
     */
    'caducidad'?: string;
}
/**
 * 
 * @export
 * @interface ModificarCollarDto
 */
export interface ModificarCollarDto {
    /**
     * 
     * @type {string}
     * @memberof ModificarCollarDto
     */
    'numeroRegistro'?: string | null;
}
/**
 * 
 * @export
 * @interface ModificarDosificador
 */
export interface ModificarDosificador {
    /**
     * 
     * @type {string}
     * @memberof ModificarDosificador
     */
    'numeroRegistro'?: string | null;
}
/**
 * 
 * @export
 * @interface ModificarGatoDto
 */
export interface ModificarGatoDto {
    /**
     * 
     * @type {string}
     * @memberof ModificarGatoDto
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModificarGatoDto
     */
    'raza'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModificarGatoDto
     */
    'sexo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ModificarGatoDto
     */
    'edad'?: number | null;
}
/**
 * 
 * @export
 * @interface ModificarUsuario
 */
export interface ModificarUsuario {
    /**
     * 
     * @type {string}
     * @memberof ModificarUsuario
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModificarUsuario
     */
    'apellidoPaterno'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModificarUsuario
     */
    'apellidoMaterno'?: string | null;
}
/**
 * 
 * @export
 * @interface NuevaActividadFelinaDto
 */
export interface NuevaActividadFelinaDto {
    /**
     * 
     * @type {string}
     * @memberof NuevaActividadFelinaDto
     */
    'actividadFelinaId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NuevaActividadFelinaDto
     */
    'gatoId': string;
    /**
     * 
     * @type {string}
     * @memberof NuevaActividadFelinaDto
     */
    'fechaInicio': string;
    /**
     * 
     * @type {string}
     * @memberof NuevaActividadFelinaDto
     */
    'fechaFin': string;
    /**
     * 
     * @type {number}
     * @memberof NuevaActividadFelinaDto
     */
    'aproximaciones'?: number;
    /**
     * 
     * @type {number}
     * @memberof NuevaActividadFelinaDto
     */
    'alimentoConsumido'?: number;
    /**
     * 
     * @type {number}
     * @memberof NuevaActividadFelinaDto
     */
    'aproximacionesSinConsumo'?: number;
}
/**
 * 
 * @export
 * @interface NuevoAvisoDto
 */
export interface NuevoAvisoDto {
    /**
     * 
     * @type {string}
     * @memberof NuevoAvisoDto
     */
    'avisoId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NuevoAvisoDto
     */
    'limpiarContenedor': string;
    /**
     * 
     * @type {string}
     * @memberof NuevoAvisoDto
     */
    'limpiarPlato': string;
    /**
     * 
     * @type {string}
     * @memberof NuevoAvisoDto
     */
    'caducidad': string;
    /**
     * 
     * @type {number}
     * @memberof NuevoAvisoDto
     */
    'alimentoDisponible'?: number;
}
/**
 * 
 * @export
 * @interface NuevoRegistroDto
 */
export interface NuevoRegistroDto {
    /**
     * 
     * @type {string}
     * @memberof NuevoRegistroDto
     */
    'registroId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NuevoRegistroDto
     */
    'dosificadorId': string;
    /**
     * 
     * @type {string}
     * @memberof NuevoRegistroDto
     */
    'collarId': string;
    /**
     * 
     * @type {string}
     * @memberof NuevoRegistroDto
     */
    'duracion': string;
    /**
     * 
     * @type {number}
     * @memberof NuevoRegistroDto
     */
    'consumo': number;
    /**
     * 
     * @type {string}
     * @memberof NuevoRegistroDto
     */
    'hora': string;
    /**
     * 
     * @type {boolean}
     * @memberof NuevoRegistroDto
     */
    'integradoAAnalisis'?: boolean;
}
/**
 * 
 * @export
 * @interface NuevoUsuario
 */
export interface NuevoUsuario {
    /**
     * 
     * @type {string}
     * @memberof NuevoUsuario
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof NuevoUsuario
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof NuevoUsuario
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface PasswordChange
 */
export interface PasswordChange {
    /**
     * 
     * @type {string}
     * @memberof PasswordChange
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordChange
     */
    'oldPassword': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordChange
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface Registro
 */
export interface Registro {
    /**
     * 
     * @type {string}
     * @memberof Registro
     */
    'registroId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Registro
     */
    'dosificadorId': string;
    /**
     * 
     * @type {string}
     * @memberof Registro
     */
    'collarId': string;
    /**
     * 
     * @type {string}
     * @memberof Registro
     */
    'duracion': string;
    /**
     * 
     * @type {number}
     * @memberof Registro
     */
    'consumo': number;
    /**
     * 
     * @type {string}
     * @memberof Registro
     */
    'hora': string;
    /**
     * 
     * @type {boolean}
     * @memberof Registro
     */
    'integradoAAnalisis'?: boolean;
    /**
     * 
     * @type {Dosificador}
     * @memberof Registro
     */
    'dosificador'?: Dosificador;
    /**
     * 
     * @type {Collar}
     * @memberof Registro
     */
    'collar'?: Collar;
}
/**
 * 
 * @export
 * @interface RespuestaAutenticacion
 */
export interface RespuestaAutenticacion {
    /**
     * 
     * @type {string}
     * @memberof RespuestaAutenticacion
     */
    'token'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RespuestaAutenticacion
     */
    'expiracion'?: string;
}
/**
 * 
 * @export
 * @interface Usuario
 */
export interface Usuario {
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'normalizedUserName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'normalizedEmail'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Usuario
     */
    'emailConfirmed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'passwordHash'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'securityStamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'concurrencyStamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Usuario
     */
    'phoneNumberConfirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Usuario
     */
    'twoFactorEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'lockoutEnd'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Usuario
     */
    'lockoutEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'accessFailedCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'apellidoPaterno'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'apellidoMaterno'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'imagenUsuario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'dosificadorId'?: string | null;
    /**
     * 
     * @type {Dosificador}
     * @memberof Usuario
     */
    'dosificador'?: Dosificador;
    /**
     * 
     * @type {Aviso}
     * @memberof Usuario
     */
    'aviso'?: Aviso;
}

/**
 * ActividadFelinaApi - axios parameter creator
 * @export
 */
export const ActividadFelinaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} gatoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActividadFelinaGatoIdGet: async (gatoId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gatoId' is not null or undefined
            assertParamExists('apiActividadFelinaGatoIdGet', 'gatoId', gatoId)
            const localVarPath = `/api/ActividadFelina/{gatoId}`
                .replace(`{${"gatoId"}}`, encodeURIComponent(String(gatoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NuevaActividadFelinaDto} [nuevaActividadFelinaDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActividadFelinaPost: async (nuevaActividadFelinaDto?: NuevaActividadFelinaDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ActividadFelina`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nuevaActividadFelinaDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActividadFelinaApi - functional programming interface
 * @export
 */
export const ActividadFelinaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActividadFelinaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} gatoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiActividadFelinaGatoIdGet(gatoId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActividadFelina>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiActividadFelinaGatoIdGet(gatoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NuevaActividadFelinaDto} [nuevaActividadFelinaDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiActividadFelinaPost(nuevaActividadFelinaDto?: NuevaActividadFelinaDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiActividadFelinaPost(nuevaActividadFelinaDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ActividadFelinaApi - factory interface
 * @export
 */
export const ActividadFelinaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActividadFelinaApiFp(configuration)
    return {
        /**
         * 
         * @param {string} gatoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActividadFelinaGatoIdGet(gatoId: string, options?: any): AxiosPromise<Array<ActividadFelina>> {
            return localVarFp.apiActividadFelinaGatoIdGet(gatoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NuevaActividadFelinaDto} [nuevaActividadFelinaDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActividadFelinaPost(nuevaActividadFelinaDto?: NuevaActividadFelinaDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiActividadFelinaPost(nuevaActividadFelinaDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActividadFelinaApi - object-oriented interface
 * @export
 * @class ActividadFelinaApi
 * @extends {BaseAPI}
 */
export class ActividadFelinaApi extends BaseAPI {
    /**
     * 
     * @param {string} gatoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActividadFelinaApi
     */
    public apiActividadFelinaGatoIdGet(gatoId: string, options?: AxiosRequestConfig) {
        return ActividadFelinaApiFp(this.configuration).apiActividadFelinaGatoIdGet(gatoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NuevaActividadFelinaDto} [nuevaActividadFelinaDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActividadFelinaApi
     */
    public apiActividadFelinaPost(nuevaActividadFelinaDto?: NuevaActividadFelinaDto, options?: AxiosRequestConfig) {
        return ActividadFelinaApiFp(this.configuration).apiActividadFelinaPost(nuevaActividadFelinaDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AvisosApi - axios parameter creator
 * @export
 */
export const AvisosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} avisoId 
         * @param {ModificarAvisoDto} [modificarAvisoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAvisosAvisoIdPut: async (avisoId: string, modificarAvisoDto?: ModificarAvisoDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'avisoId' is not null or undefined
            assertParamExists('apiAvisosAvisoIdPut', 'avisoId', avisoId)
            const localVarPath = `/api/Avisos/{avisoId}`
                .replace(`{${"avisoId"}}`, encodeURIComponent(String(avisoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modificarAvisoDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAvisosGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Avisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NuevoAvisoDto} [nuevoAvisoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAvisosPost: async (nuevoAvisoDto?: NuevoAvisoDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Avisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nuevoAvisoDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AvisosApi - functional programming interface
 * @export
 */
export const AvisosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AvisosApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} avisoId 
         * @param {ModificarAvisoDto} [modificarAvisoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAvisosAvisoIdPut(avisoId: string, modificarAvisoDto?: ModificarAvisoDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAvisosAvisoIdPut(avisoId, modificarAvisoDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAvisosGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Aviso>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAvisosGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NuevoAvisoDto} [nuevoAvisoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAvisosPost(nuevoAvisoDto?: NuevoAvisoDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAvisosPost(nuevoAvisoDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AvisosApi - factory interface
 * @export
 */
export const AvisosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AvisosApiFp(configuration)
    return {
        /**
         * 
         * @param {string} avisoId 
         * @param {ModificarAvisoDto} [modificarAvisoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAvisosAvisoIdPut(avisoId: string, modificarAvisoDto?: ModificarAvisoDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAvisosAvisoIdPut(avisoId, modificarAvisoDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAvisosGet(options?: any): AxiosPromise<Aviso> {
            return localVarFp.apiAvisosGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NuevoAvisoDto} [nuevoAvisoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAvisosPost(nuevoAvisoDto?: NuevoAvisoDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAvisosPost(nuevoAvisoDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AvisosApi - object-oriented interface
 * @export
 * @class AvisosApi
 * @extends {BaseAPI}
 */
export class AvisosApi extends BaseAPI {
    /**
     * 
     * @param {string} avisoId 
     * @param {ModificarAvisoDto} [modificarAvisoDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvisosApi
     */
    public apiAvisosAvisoIdPut(avisoId: string, modificarAvisoDto?: ModificarAvisoDto, options?: AxiosRequestConfig) {
        return AvisosApiFp(this.configuration).apiAvisosAvisoIdPut(avisoId, modificarAvisoDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvisosApi
     */
    public apiAvisosGet(options?: AxiosRequestConfig) {
        return AvisosApiFp(this.configuration).apiAvisosGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NuevoAvisoDto} [nuevoAvisoDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvisosApi
     */
    public apiAvisosPost(nuevoAvisoDto?: NuevoAvisoDto, options?: AxiosRequestConfig) {
        return AvisosApiFp(this.configuration).apiAvisosPost(nuevoAvisoDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CollaresApi - axios parameter creator
 * @export
 */
export const CollaresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} collarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollaresCollarIdGet: async (collarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collarId' is not null or undefined
            assertParamExists('apiCollaresCollarIdGet', 'collarId', collarId)
            const localVarPath = `/api/Collares/{collarId}`
                .replace(`{${"collarId"}}`, encodeURIComponent(String(collarId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollaresGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Collares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CollarEntidadDto} [collarEntidadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollaresPost: async (collarEntidadDto?: CollarEntidadDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Collares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collarEntidadDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CollaresApi - functional programming interface
 * @export
 */
export const CollaresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CollaresApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} collarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCollaresCollarIdGet(collarId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCollaresCollarIdGet(collarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCollaresGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Collar>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCollaresGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CollarEntidadDto} [collarEntidadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCollaresPost(collarEntidadDto?: CollarEntidadDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCollaresPost(collarEntidadDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CollaresApi - factory interface
 * @export
 */
export const CollaresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CollaresApiFp(configuration)
    return {
        /**
         * 
         * @param {string} collarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollaresCollarIdGet(collarId: string, options?: any): AxiosPromise<Collar> {
            return localVarFp.apiCollaresCollarIdGet(collarId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollaresGet(options?: any): AxiosPromise<Array<Collar>> {
            return localVarFp.apiCollaresGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CollarEntidadDto} [collarEntidadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollaresPost(collarEntidadDto?: CollarEntidadDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiCollaresPost(collarEntidadDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CollaresApi - object-oriented interface
 * @export
 * @class CollaresApi
 * @extends {BaseAPI}
 */
export class CollaresApi extends BaseAPI {
    /**
     * 
     * @param {string} collarId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollaresApi
     */
    public apiCollaresCollarIdGet(collarId: string, options?: AxiosRequestConfig) {
        return CollaresApiFp(this.configuration).apiCollaresCollarIdGet(collarId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollaresApi
     */
    public apiCollaresGet(options?: AxiosRequestConfig) {
        return CollaresApiFp(this.configuration).apiCollaresGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CollarEntidadDto} [collarEntidadDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollaresApi
     */
    public apiCollaresPost(collarEntidadDto?: CollarEntidadDto, options?: AxiosRequestConfig) {
        return CollaresApiFp(this.configuration).apiCollaresPost(collarEntidadDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CuentasApi - axios parameter creator
 * @export
 */
export const CuentasApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ModificarDosificador} [modificarDosificador] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasActivarDosificadorPut: async (modificarDosificador?: ModificarDosificador, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cuentas/activarDosificador`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modificarDosificador, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PasswordChange} [passwordChange] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasCambiarPasswordPut: async (passwordChange?: PasswordChange, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cuentas/cambiarPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordChange, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ModificarDosificador} [modificarDosificador] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasDesactivarDosificadorPut: async (modificarDosificador?: ModificarDosificador, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cuentas/desactivarDosificador`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modificarDosificador, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} [imagen] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasImagenPut: async (imagen?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cuentas/Imagen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (imagen !== undefined) { 
                localVarFormParams.append('Imagen', imagen as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CredencialesUsuario} [credencialesUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasLoginPost: async (credencialesUsuario?: CredencialesUsuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cuentas/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(credencialesUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ModificarUsuario} [modificarUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasModificarUsuarioPut: async (modificarUsuario?: ModificarUsuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cuentas/modificarUsuario`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modificarUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NuevoUsuario} [nuevoUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasRegistrarPost: async (nuevoUsuario?: NuevoUsuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cuentas/registrar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nuevoUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasRenovarTokenGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cuentas/RenovarToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasUsuarioGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cuentas/usuario`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CuentasApi - functional programming interface
 * @export
 */
export const CuentasApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CuentasApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ModificarDosificador} [modificarDosificador] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCuentasActivarDosificadorPut(modificarDosificador?: ModificarDosificador, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCuentasActivarDosificadorPut(modificarDosificador, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PasswordChange} [passwordChange] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCuentasCambiarPasswordPut(passwordChange?: PasswordChange, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RespuestaAutenticacion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCuentasCambiarPasswordPut(passwordChange, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ModificarDosificador} [modificarDosificador] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCuentasDesactivarDosificadorPut(modificarDosificador?: ModificarDosificador, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCuentasDesactivarDosificadorPut(modificarDosificador, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {File} [imagen] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCuentasImagenPut(imagen?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCuentasImagenPut(imagen, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CredencialesUsuario} [credencialesUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCuentasLoginPost(credencialesUsuario?: CredencialesUsuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RespuestaAutenticacion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCuentasLoginPost(credencialesUsuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ModificarUsuario} [modificarUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCuentasModificarUsuarioPut(modificarUsuario?: ModificarUsuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCuentasModificarUsuarioPut(modificarUsuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NuevoUsuario} [nuevoUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCuentasRegistrarPost(nuevoUsuario?: NuevoUsuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RespuestaAutenticacion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCuentasRegistrarPost(nuevoUsuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCuentasRenovarTokenGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RespuestaAutenticacion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCuentasRenovarTokenGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCuentasUsuarioGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsuario>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCuentasUsuarioGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CuentasApi - factory interface
 * @export
 */
export const CuentasApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CuentasApiFp(configuration)
    return {
        /**
         * 
         * @param {ModificarDosificador} [modificarDosificador] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasActivarDosificadorPut(modificarDosificador?: ModificarDosificador, options?: any): AxiosPromise<void> {
            return localVarFp.apiCuentasActivarDosificadorPut(modificarDosificador, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PasswordChange} [passwordChange] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasCambiarPasswordPut(passwordChange?: PasswordChange, options?: any): AxiosPromise<RespuestaAutenticacion> {
            return localVarFp.apiCuentasCambiarPasswordPut(passwordChange, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ModificarDosificador} [modificarDosificador] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasDesactivarDosificadorPut(modificarDosificador?: ModificarDosificador, options?: any): AxiosPromise<void> {
            return localVarFp.apiCuentasDesactivarDosificadorPut(modificarDosificador, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {File} [imagen] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasImagenPut(imagen?: File, options?: any): AxiosPromise<string> {
            return localVarFp.apiCuentasImagenPut(imagen, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CredencialesUsuario} [credencialesUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasLoginPost(credencialesUsuario?: CredencialesUsuario, options?: any): AxiosPromise<RespuestaAutenticacion> {
            return localVarFp.apiCuentasLoginPost(credencialesUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ModificarUsuario} [modificarUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasModificarUsuarioPut(modificarUsuario?: ModificarUsuario, options?: any): AxiosPromise<void> {
            return localVarFp.apiCuentasModificarUsuarioPut(modificarUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NuevoUsuario} [nuevoUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasRegistrarPost(nuevoUsuario?: NuevoUsuario, options?: any): AxiosPromise<RespuestaAutenticacion> {
            return localVarFp.apiCuentasRegistrarPost(nuevoUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasRenovarTokenGet(options?: any): AxiosPromise<RespuestaAutenticacion> {
            return localVarFp.apiCuentasRenovarTokenGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCuentasUsuarioGet(options?: any): AxiosPromise<GetUsuario> {
            return localVarFp.apiCuentasUsuarioGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CuentasApi - object-oriented interface
 * @export
 * @class CuentasApi
 * @extends {BaseAPI}
 */
export class CuentasApi extends BaseAPI {
    /**
     * 
     * @param {ModificarDosificador} [modificarDosificador] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CuentasApi
     */
    public apiCuentasActivarDosificadorPut(modificarDosificador?: ModificarDosificador, options?: AxiosRequestConfig) {
        return CuentasApiFp(this.configuration).apiCuentasActivarDosificadorPut(modificarDosificador, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PasswordChange} [passwordChange] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CuentasApi
     */
    public apiCuentasCambiarPasswordPut(passwordChange?: PasswordChange, options?: AxiosRequestConfig) {
        return CuentasApiFp(this.configuration).apiCuentasCambiarPasswordPut(passwordChange, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ModificarDosificador} [modificarDosificador] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CuentasApi
     */
    public apiCuentasDesactivarDosificadorPut(modificarDosificador?: ModificarDosificador, options?: AxiosRequestConfig) {
        return CuentasApiFp(this.configuration).apiCuentasDesactivarDosificadorPut(modificarDosificador, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {File} [imagen] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CuentasApi
     */
    public apiCuentasImagenPut(imagen?: File, options?: AxiosRequestConfig) {
        return CuentasApiFp(this.configuration).apiCuentasImagenPut(imagen, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CredencialesUsuario} [credencialesUsuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CuentasApi
     */
    public apiCuentasLoginPost(credencialesUsuario?: CredencialesUsuario, options?: AxiosRequestConfig) {
        return CuentasApiFp(this.configuration).apiCuentasLoginPost(credencialesUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ModificarUsuario} [modificarUsuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CuentasApi
     */
    public apiCuentasModificarUsuarioPut(modificarUsuario?: ModificarUsuario, options?: AxiosRequestConfig) {
        return CuentasApiFp(this.configuration).apiCuentasModificarUsuarioPut(modificarUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NuevoUsuario} [nuevoUsuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CuentasApi
     */
    public apiCuentasRegistrarPost(nuevoUsuario?: NuevoUsuario, options?: AxiosRequestConfig) {
        return CuentasApiFp(this.configuration).apiCuentasRegistrarPost(nuevoUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CuentasApi
     */
    public apiCuentasRenovarTokenGet(options?: AxiosRequestConfig) {
        return CuentasApiFp(this.configuration).apiCuentasRenovarTokenGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CuentasApi
     */
    public apiCuentasUsuarioGet(options?: AxiosRequestConfig) {
        return CuentasApiFp(this.configuration).apiCuentasUsuarioGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DiasdelaSemanaApi - axios parameter creator
 * @export
 */
export const DiasdelaSemanaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDiasdelaSemanaGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DiasdelaSemana`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DiadelaSemana} [diadelaSemana] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDiasdelaSemanaPost: async (diadelaSemana?: DiadelaSemana, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DiasdelaSemana`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(diadelaSemana, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DiasdelaSemanaApi - functional programming interface
 * @export
 */
export const DiasdelaSemanaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DiasdelaSemanaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDiasdelaSemanaGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DiadelaSemana>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDiasdelaSemanaGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DiadelaSemana} [diadelaSemana] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDiasdelaSemanaPost(diadelaSemana?: DiadelaSemana, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDiasdelaSemanaPost(diadelaSemana, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DiasdelaSemanaApi - factory interface
 * @export
 */
export const DiasdelaSemanaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DiasdelaSemanaApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDiasdelaSemanaGet(options?: any): AxiosPromise<Array<DiadelaSemana>> {
            return localVarFp.apiDiasdelaSemanaGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DiadelaSemana} [diadelaSemana] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDiasdelaSemanaPost(diadelaSemana?: DiadelaSemana, options?: any): AxiosPromise<void> {
            return localVarFp.apiDiasdelaSemanaPost(diadelaSemana, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DiasdelaSemanaApi - object-oriented interface
 * @export
 * @class DiasdelaSemanaApi
 * @extends {BaseAPI}
 */
export class DiasdelaSemanaApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiasdelaSemanaApi
     */
    public apiDiasdelaSemanaGet(options?: AxiosRequestConfig) {
        return DiasdelaSemanaApiFp(this.configuration).apiDiasdelaSemanaGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DiadelaSemana} [diadelaSemana] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiasdelaSemanaApi
     */
    public apiDiasdelaSemanaPost(diadelaSemana?: DiadelaSemana, options?: AxiosRequestConfig) {
        return DiasdelaSemanaApiFp(this.configuration).apiDiasdelaSemanaPost(diadelaSemana, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DosificadoresApi - axios parameter creator
 * @export
 */
export const DosificadoresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} dosificadorId 
         * @param {DisponibilidadAvisoDto} [disponibilidadAvisoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDosificadoresDisponibilidadDosificadorIdPut: async (dosificadorId: string, disponibilidadAvisoDto?: DisponibilidadAvisoDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dosificadorId' is not null or undefined
            assertParamExists('apiDosificadoresDisponibilidadDosificadorIdPut', 'dosificadorId', dosificadorId)
            const localVarPath = `/api/Dosificadores/disponibilidad/{dosificadorId}`
                .replace(`{${"dosificadorId"}}`, encodeURIComponent(String(dosificadorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(disponibilidadAvisoDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} dosificadorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDosificadoresDosificadorIdGet: async (dosificadorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dosificadorId' is not null or undefined
            assertParamExists('apiDosificadoresDosificadorIdGet', 'dosificadorId', dosificadorId)
            const localVarPath = `/api/Dosificadores/{dosificadorId}`
                .replace(`{${"dosificadorId"}}`, encodeURIComponent(String(dosificadorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDosificadoresGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Dosificadores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DosificadorEntidadDto} [dosificadorEntidadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDosificadoresPost: async (dosificadorEntidadDto?: DosificadorEntidadDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Dosificadores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dosificadorEntidadDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DosificadoresApi - functional programming interface
 * @export
 */
export const DosificadoresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DosificadoresApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} dosificadorId 
         * @param {DisponibilidadAvisoDto} [disponibilidadAvisoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDosificadoresDisponibilidadDosificadorIdPut(dosificadorId: string, disponibilidadAvisoDto?: DisponibilidadAvisoDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDosificadoresDisponibilidadDosificadorIdPut(dosificadorId, disponibilidadAvisoDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} dosificadorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDosificadoresDosificadorIdGet(dosificadorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dosificador>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDosificadoresDosificadorIdGet(dosificadorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDosificadoresGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Dosificador>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDosificadoresGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DosificadorEntidadDto} [dosificadorEntidadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDosificadoresPost(dosificadorEntidadDto?: DosificadorEntidadDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDosificadoresPost(dosificadorEntidadDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DosificadoresApi - factory interface
 * @export
 */
export const DosificadoresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DosificadoresApiFp(configuration)
    return {
        /**
         * 
         * @param {string} dosificadorId 
         * @param {DisponibilidadAvisoDto} [disponibilidadAvisoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDosificadoresDisponibilidadDosificadorIdPut(dosificadorId: string, disponibilidadAvisoDto?: DisponibilidadAvisoDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiDosificadoresDisponibilidadDosificadorIdPut(dosificadorId, disponibilidadAvisoDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} dosificadorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDosificadoresDosificadorIdGet(dosificadorId: string, options?: any): AxiosPromise<Dosificador> {
            return localVarFp.apiDosificadoresDosificadorIdGet(dosificadorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDosificadoresGet(options?: any): AxiosPromise<Array<Dosificador>> {
            return localVarFp.apiDosificadoresGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DosificadorEntidadDto} [dosificadorEntidadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDosificadoresPost(dosificadorEntidadDto?: DosificadorEntidadDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiDosificadoresPost(dosificadorEntidadDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DosificadoresApi - object-oriented interface
 * @export
 * @class DosificadoresApi
 * @extends {BaseAPI}
 */
export class DosificadoresApi extends BaseAPI {
    /**
     * 
     * @param {string} dosificadorId 
     * @param {DisponibilidadAvisoDto} [disponibilidadAvisoDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosificadoresApi
     */
    public apiDosificadoresDisponibilidadDosificadorIdPut(dosificadorId: string, disponibilidadAvisoDto?: DisponibilidadAvisoDto, options?: AxiosRequestConfig) {
        return DosificadoresApiFp(this.configuration).apiDosificadoresDisponibilidadDosificadorIdPut(dosificadorId, disponibilidadAvisoDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} dosificadorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosificadoresApi
     */
    public apiDosificadoresDosificadorIdGet(dosificadorId: string, options?: AxiosRequestConfig) {
        return DosificadoresApiFp(this.configuration).apiDosificadoresDosificadorIdGet(dosificadorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosificadoresApi
     */
    public apiDosificadoresGet(options?: AxiosRequestConfig) {
        return DosificadoresApiFp(this.configuration).apiDosificadoresGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DosificadorEntidadDto} [dosificadorEntidadDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosificadoresApi
     */
    public apiDosificadoresPost(dosificadorEntidadDto?: DosificadorEntidadDto, options?: AxiosRequestConfig) {
        return DosificadoresApiFp(this.configuration).apiDosificadoresPost(dosificadorEntidadDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GatosApi - axios parameter creator
 * @export
 */
export const GatosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} gatoId 
         * @param {ModificarCollarDto} [modificarCollarDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGatosActivarCollarGatoIdPut: async (gatoId: string, modificarCollarDto?: ModificarCollarDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gatoId' is not null or undefined
            assertParamExists('apiGatosActivarCollarGatoIdPut', 'gatoId', gatoId)
            const localVarPath = `/api/Gatos/activarCollar/{gatoId}`
                .replace(`{${"gatoId"}}`, encodeURIComponent(String(gatoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modificarCollarDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gatoId 
         * @param {ModificarCollarDto} [modificarCollarDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGatosDesactivarCollarGatoIdPut: async (gatoId: string, modificarCollarDto?: ModificarCollarDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gatoId' is not null or undefined
            assertParamExists('apiGatosDesactivarCollarGatoIdPut', 'gatoId', gatoId)
            const localVarPath = `/api/Gatos/desactivarCollar/{gatoId}`
                .replace(`{${"gatoId"}}`, encodeURIComponent(String(gatoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modificarCollarDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gatoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGatosGatoIdGet: async (gatoId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gatoId' is not null or undefined
            assertParamExists('apiGatosGatoIdGet', 'gatoId', gatoId)
            const localVarPath = `/api/Gatos/{gatoId}`
                .replace(`{${"gatoId"}}`, encodeURIComponent(String(gatoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gatoId 
         * @param {GatoEntidadDto} [gatoEntidadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGatosGatoIdPost: async (gatoId: string, gatoEntidadDto?: GatoEntidadDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gatoId' is not null or undefined
            assertParamExists('apiGatosGatoIdPost', 'gatoId', gatoId)
            const localVarPath = `/api/Gatos/{gatoId}`
                .replace(`{${"gatoId"}}`, encodeURIComponent(String(gatoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gatoEntidadDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gatoId 
         * @param {ModificarGatoDto} [modificarGatoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGatosGatoIdPut: async (gatoId: string, modificarGatoDto?: ModificarGatoDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gatoId' is not null or undefined
            assertParamExists('apiGatosGatoIdPut', 'gatoId', gatoId)
            const localVarPath = `/api/Gatos/{gatoId}`
                .replace(`{${"gatoId"}}`, encodeURIComponent(String(gatoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modificarGatoDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGatosGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Gatos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gatoId 
         * @param {File} [imagen] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGatosImagenGatoIdPut: async (gatoId: string, imagen?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gatoId' is not null or undefined
            assertParamExists('apiGatosImagenGatoIdPut', 'gatoId', gatoId)
            const localVarPath = `/api/Gatos/imagen/{gatoId}`
                .replace(`{${"gatoId"}}`, encodeURIComponent(String(gatoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (imagen !== undefined) { 
                localVarFormParams.append('Imagen', imagen as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GatosApi - functional programming interface
 * @export
 */
export const GatosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GatosApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} gatoId 
         * @param {ModificarCollarDto} [modificarCollarDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGatosActivarCollarGatoIdPut(gatoId: string, modificarCollarDto?: ModificarCollarDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGatosActivarCollarGatoIdPut(gatoId, modificarCollarDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} gatoId 
         * @param {ModificarCollarDto} [modificarCollarDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGatosDesactivarCollarGatoIdPut(gatoId: string, modificarCollarDto?: ModificarCollarDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGatosDesactivarCollarGatoIdPut(gatoId, modificarCollarDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} gatoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGatosGatoIdGet(gatoId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Gato>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGatosGatoIdGet(gatoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} gatoId 
         * @param {GatoEntidadDto} [gatoEntidadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGatosGatoIdPost(gatoId: string, gatoEntidadDto?: GatoEntidadDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGatosGatoIdPost(gatoId, gatoEntidadDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} gatoId 
         * @param {ModificarGatoDto} [modificarGatoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGatosGatoIdPut(gatoId: string, modificarGatoDto?: ModificarGatoDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGatosGatoIdPut(gatoId, modificarGatoDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGatosGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GatoEntidadDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGatosGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} gatoId 
         * @param {File} [imagen] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGatosImagenGatoIdPut(gatoId: string, imagen?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGatosImagenGatoIdPut(gatoId, imagen, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GatosApi - factory interface
 * @export
 */
export const GatosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GatosApiFp(configuration)
    return {
        /**
         * 
         * @param {string} gatoId 
         * @param {ModificarCollarDto} [modificarCollarDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGatosActivarCollarGatoIdPut(gatoId: string, modificarCollarDto?: ModificarCollarDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiGatosActivarCollarGatoIdPut(gatoId, modificarCollarDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} gatoId 
         * @param {ModificarCollarDto} [modificarCollarDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGatosDesactivarCollarGatoIdPut(gatoId: string, modificarCollarDto?: ModificarCollarDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiGatosDesactivarCollarGatoIdPut(gatoId, modificarCollarDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} gatoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGatosGatoIdGet(gatoId: string, options?: any): AxiosPromise<Gato> {
            return localVarFp.apiGatosGatoIdGet(gatoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} gatoId 
         * @param {GatoEntidadDto} [gatoEntidadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGatosGatoIdPost(gatoId: string, gatoEntidadDto?: GatoEntidadDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiGatosGatoIdPost(gatoId, gatoEntidadDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} gatoId 
         * @param {ModificarGatoDto} [modificarGatoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGatosGatoIdPut(gatoId: string, modificarGatoDto?: ModificarGatoDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiGatosGatoIdPut(gatoId, modificarGatoDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGatosGet(options?: any): AxiosPromise<Array<GatoEntidadDto>> {
            return localVarFp.apiGatosGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} gatoId 
         * @param {File} [imagen] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGatosImagenGatoIdPut(gatoId: string, imagen?: File, options?: any): AxiosPromise<void> {
            return localVarFp.apiGatosImagenGatoIdPut(gatoId, imagen, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GatosApi - object-oriented interface
 * @export
 * @class GatosApi
 * @extends {BaseAPI}
 */
export class GatosApi extends BaseAPI {
    /**
     * 
     * @param {string} gatoId 
     * @param {ModificarCollarDto} [modificarCollarDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatosApi
     */
    public apiGatosActivarCollarGatoIdPut(gatoId: string, modificarCollarDto?: ModificarCollarDto, options?: AxiosRequestConfig) {
        return GatosApiFp(this.configuration).apiGatosActivarCollarGatoIdPut(gatoId, modificarCollarDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} gatoId 
     * @param {ModificarCollarDto} [modificarCollarDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatosApi
     */
    public apiGatosDesactivarCollarGatoIdPut(gatoId: string, modificarCollarDto?: ModificarCollarDto, options?: AxiosRequestConfig) {
        return GatosApiFp(this.configuration).apiGatosDesactivarCollarGatoIdPut(gatoId, modificarCollarDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} gatoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatosApi
     */
    public apiGatosGatoIdGet(gatoId: string, options?: AxiosRequestConfig) {
        return GatosApiFp(this.configuration).apiGatosGatoIdGet(gatoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} gatoId 
     * @param {GatoEntidadDto} [gatoEntidadDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatosApi
     */
    public apiGatosGatoIdPost(gatoId: string, gatoEntidadDto?: GatoEntidadDto, options?: AxiosRequestConfig) {
        return GatosApiFp(this.configuration).apiGatosGatoIdPost(gatoId, gatoEntidadDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} gatoId 
     * @param {ModificarGatoDto} [modificarGatoDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatosApi
     */
    public apiGatosGatoIdPut(gatoId: string, modificarGatoDto?: ModificarGatoDto, options?: AxiosRequestConfig) {
        return GatosApiFp(this.configuration).apiGatosGatoIdPut(gatoId, modificarGatoDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatosApi
     */
    public apiGatosGet(options?: AxiosRequestConfig) {
        return GatosApiFp(this.configuration).apiGatosGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} gatoId 
     * @param {File} [imagen] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GatosApi
     */
    public apiGatosImagenGatoIdPut(gatoId: string, imagen?: File, options?: AxiosRequestConfig) {
        return GatosApiFp(this.configuration).apiGatosImagenGatoIdPut(gatoId, imagen, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HorariosApi - axios parameter creator
 * @export
 */
export const HorariosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHorariosGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Horarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} horarioId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHorariosHorarioIdDelete: async (horarioId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'horarioId' is not null or undefined
            assertParamExists('apiHorariosHorarioIdDelete', 'horarioId', horarioId)
            const localVarPath = `/api/Horarios/{horarioId}`
                .replace(`{${"horarioId"}}`, encodeURIComponent(String(horarioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} horarioId 
         * @param {HorarioModificarDto} [horarioModificarDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHorariosHorarioIdPut: async (horarioId: string, horarioModificarDto?: HorarioModificarDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'horarioId' is not null or undefined
            assertParamExists('apiHorariosHorarioIdPut', 'horarioId', horarioId)
            const localVarPath = `/api/Horarios/{horarioId}`
                .replace(`{${"horarioId"}}`, encodeURIComponent(String(horarioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(horarioModificarDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {HorarioEntidadDto} [horarioEntidadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHorariosPost: async (horarioEntidadDto?: HorarioEntidadDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Horarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(horarioEntidadDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HorariosApi - functional programming interface
 * @export
 */
export const HorariosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HorariosApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHorariosGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HorarioEntidadDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiHorariosGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} horarioId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHorariosHorarioIdDelete(horarioId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiHorariosHorarioIdDelete(horarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} horarioId 
         * @param {HorarioModificarDto} [horarioModificarDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHorariosHorarioIdPut(horarioId: string, horarioModificarDto?: HorarioModificarDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiHorariosHorarioIdPut(horarioId, horarioModificarDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {HorarioEntidadDto} [horarioEntidadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHorariosPost(horarioEntidadDto?: HorarioEntidadDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Horario>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiHorariosPost(horarioEntidadDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HorariosApi - factory interface
 * @export
 */
export const HorariosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HorariosApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHorariosGet(options?: any): AxiosPromise<Array<HorarioEntidadDto>> {
            return localVarFp.apiHorariosGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} horarioId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHorariosHorarioIdDelete(horarioId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiHorariosHorarioIdDelete(horarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} horarioId 
         * @param {HorarioModificarDto} [horarioModificarDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHorariosHorarioIdPut(horarioId: string, horarioModificarDto?: HorarioModificarDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiHorariosHorarioIdPut(horarioId, horarioModificarDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HorarioEntidadDto} [horarioEntidadDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHorariosPost(horarioEntidadDto?: HorarioEntidadDto, options?: any): AxiosPromise<Array<Horario>> {
            return localVarFp.apiHorariosPost(horarioEntidadDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HorariosApi - object-oriented interface
 * @export
 * @class HorariosApi
 * @extends {BaseAPI}
 */
export class HorariosApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HorariosApi
     */
    public apiHorariosGet(options?: AxiosRequestConfig) {
        return HorariosApiFp(this.configuration).apiHorariosGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} horarioId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HorariosApi
     */
    public apiHorariosHorarioIdDelete(horarioId: string, options?: AxiosRequestConfig) {
        return HorariosApiFp(this.configuration).apiHorariosHorarioIdDelete(horarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} horarioId 
     * @param {HorarioModificarDto} [horarioModificarDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HorariosApi
     */
    public apiHorariosHorarioIdPut(horarioId: string, horarioModificarDto?: HorarioModificarDto, options?: AxiosRequestConfig) {
        return HorariosApiFp(this.configuration).apiHorariosHorarioIdPut(horarioId, horarioModificarDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HorarioEntidadDto} [horarioEntidadDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HorariosApi
     */
    public apiHorariosPost(horarioEntidadDto?: HorarioEntidadDto, options?: AxiosRequestConfig) {
        return HorariosApiFp(this.configuration).apiHorariosPost(horarioEntidadDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RegistrosApi - axios parameter creator
 * @export
 */
export const RegistrosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} collarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegistrosCollarIdGet: async (collarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collarId' is not null or undefined
            assertParamExists('apiRegistrosCollarIdGet', 'collarId', collarId)
            const localVarPath = `/api/Registros/{collarId}`
                .replace(`{${"collarId"}}`, encodeURIComponent(String(collarId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NuevoRegistroDto} [nuevoRegistroDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegistrosPost: async (nuevoRegistroDto?: NuevoRegistroDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Registros`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nuevoRegistroDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistrosApi - functional programming interface
 * @export
 */
export const RegistrosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegistrosApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} collarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegistrosCollarIdGet(collarId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Registro>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRegistrosCollarIdGet(collarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NuevoRegistroDto} [nuevoRegistroDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegistrosPost(nuevoRegistroDto?: NuevoRegistroDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRegistrosPost(nuevoRegistroDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegistrosApi - factory interface
 * @export
 */
export const RegistrosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegistrosApiFp(configuration)
    return {
        /**
         * 
         * @param {string} collarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegistrosCollarIdGet(collarId: string, options?: any): AxiosPromise<Array<Registro>> {
            return localVarFp.apiRegistrosCollarIdGet(collarId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NuevoRegistroDto} [nuevoRegistroDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegistrosPost(nuevoRegistroDto?: NuevoRegistroDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiRegistrosPost(nuevoRegistroDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegistrosApi - object-oriented interface
 * @export
 * @class RegistrosApi
 * @extends {BaseAPI}
 */
export class RegistrosApi extends BaseAPI {
    /**
     * 
     * @param {string} collarId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrosApi
     */
    public apiRegistrosCollarIdGet(collarId: string, options?: AxiosRequestConfig) {
        return RegistrosApiFp(this.configuration).apiRegistrosCollarIdGet(collarId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NuevoRegistroDto} [nuevoRegistroDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrosApi
     */
    public apiRegistrosPost(nuevoRegistroDto?: NuevoRegistroDto, options?: AxiosRequestConfig) {
        return RegistrosApiFp(this.configuration).apiRegistrosPost(nuevoRegistroDto, options).then((request) => request(this.axios, this.basePath));
    }
}


